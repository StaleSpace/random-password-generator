{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","length","pwd","generatePwd","len","arr","Uint8Array","window","crypto","getRandomValues","Array","from","dec","toString","substr","join","setState","_this2","react_default","a","createElement","className","style","marginBottom","marginTop","id","name","type","readOnly","value","htmlFor","min","max","width","onChange","e","target","textAlign","onClick","color","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25dbf76b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      length: 8,\n      pwd: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.generatePwd(this.state.length);\n  }\n  generatePwd(len) {\n    var arr = new Uint8Array((len || 40) / 2);\n    window.crypto.getRandomValues(arr);\n    let pwd = Array.from(arr, dec => {\n      return (\"0\" + dec.toString(16)).substr(-2);\n    }).join(\"\");\n    this.setState({ pwd });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <section>\n          <header>\n            <p style={{ marginBottom: \"-10px\", marginTop: \"3%\" }}>\n              Random Password Generator Tool\n            </p>\n            <h1>Generate a secure password</h1>\n          </header>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"text\"\n            readOnly\n            value={this.state.pwd}\n          />\n        </section>\n        <hr />\n        <section>\n          <header>\n            <h3>Customize your password</h3>\n          </header>\n          <fieldset>\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"form-group\">\n                  <label className=\"checkbox-container\">\n                    Uppercase\n                    <input type=\"checkbox\" />\n                    <span className=\"checkmark\" />\n                  </label>\n                  <label className=\"checkbox-container\">\n                    Lowercase\n                    <input type=\"checkbox\" />\n                    <span className=\"checkmark\" />\n                  </label>\n                  <label className=\"checkbox-container\">\n                    Numeric\n                    <input type=\"checkbox\" />\n                    <span className=\"checkmark\" />\n                  </label>\n                  <label className=\"checkbox-container\">\n                    Symbols\n                    <input type=\"checkbox\" />\n                    <span className=\"checkmark\" />\n                  </label>\n                </div>\n              </div>\n              <div className=\"col\">\n                <div className=\"form-group\">\n                  <div className=\"row\">\n                    <div className=\"col\">\n                      <label htmlFor=\"email\">Password Length:</label>\n                      &nbsp;&nbsp;\n                    </div>\n                    <div className=\"col\">\n                      <input\n                        type=\"number\"\n                        min=\"8\"\n                        max=\"40\"\n                        style={{ width: 65 }}\n                        value={this.state.length}\n                        onChange={e => {\n                          this.generatePwd(e.target.value);\n                          this.setState({ length: e.target.value });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  &nbsp;\n                  <div className=\"slider-container\">\n                    <input\n                      className=\"slider\"\n                      type=\"range\"\n                      min=\"8\"\n                      max=\"40\"\n                      value={this.state.length}\n                      onChange={e => {\n                        this.generatePwd(e.target.value);\n                        this.setState({ length: e.target.value });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </fieldset>\n          <br />\n          <div style={{ textAlign: \"left\" }}>\n            <div className=\"row\">\n              <div className=\"col\">\n                <button className=\"btn  btn-primary\" onClick={() => {\n                  this.generatePwd(this.state.length);\n                }}>Generate</button>\n              </div>\n              <div className=\"col\">\n                <button className=\"btn btn-error\">Copy Passoword</button>\n              </div>\n            </div>\n\n            <br />\n            <br />\n          </div>\n        </section>\n        <div\n          style={{\n            textAlign: \"center\"\n          }}\n        >\n          Made with <span style={{ color: \"#e25555\" }}>&#9829;</span> by{\" \"}\n          <a href=\"http://kamerk22.github.io\">Kashyap Merai</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'terminal.css';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}